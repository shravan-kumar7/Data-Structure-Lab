 //circular queue using linked list
    #include<stdio.h>
    #include<stdlib.h>
    struct node
{
    int data;
    struct node*next;
};
    struct node *front=-1;
    struct node *rear=-1;
    void enqueue(int x) //function to insert elements in queue
{
    struct node* newnode;
    newnode=(struct node*)malloc(sizeof(struct node));
    newnode->data=x;
    newnode->next=0;
    if(rear==-1)
{
    front=rear=newnode;
    rear->next=front;
}
    else
{
    rear->next=newnode;
    rear=newnode;
    rear->next=front;
}
}
    void dequeue() //function to delete an element from queue
{
    struct node*temp;
    temp=front;
    if((front==-1)&&(rear==-1))
{
    printf("Queue is empty\n");
}
    else if(front==rear)
{
    front=rear-1;
    free(temp);
}
    else
{
    front=front->next;
    rear->next=front;
    free(temp);
}
}

    void display() //function to print elements
{
    struct node *t;
    t=front;
    
    if((front==NULL)&&(rear==NULL))
    printf("Queue is empty\n");

    else
{
    do {
        printf("\n%d\n",t->data);
        t=t->next;
       } while(t!=front);       
}
}
    int main()  //main function
{
    int choice,n,i,data;
    
    while(1)
{
    printf("select the operation\n");
    printf("\n1.insert\n2.delete\n3.display\n4.exit\n");  //menu driven function
   
    scanf("%d",&choice);
    switch(choice)
{
    case 1: printf("\n enter the no. of data\n");
    scanf("%d",&n);
    printf("enter ur data\n");
    i=0;
    while(i<n){
    scanf("%d",&data);
     enqueue(data);
     i++;
     }
 
    break;
    case 2: dequeue();
    break;
    case 3: display();
    break;
    case 4: exit(0);
    break;
    default:printf("Invalid choice\n");
    break;
}
}
return 0;
}
